<div class="multi-converter-container">
  <!-- Navigation Tabs -->
  <div class="converter-tabs">
    <button class="tab-btn active" data-tab="jpg-to-pdf">JPG to PDF</button>
    <button class="tab-btn" data-tab="word-to-pdf">Word to PDF</button>
    <button class="tab-btn" data-tab="pdf-to-word">PDF to Word</button>
    <button class="tab-btn" data-tab="unit-converter">Unit Converter</button>
    <button class="tab-btn" data-tab="currency-converter">Currency Converter</button>
  </div>

  <!-- JPG to PDF Converter -->
  <div id="jpg-to-pdf" class="converter-tab-content active">
    <!-- Previous JPG to PDF content here -->
    <div class="jpg-to-pdf-converter">
      <div class="converter-header">
        <h1>JPG to PDF Converter</h1>
        <p>Convert JPG images to PDF documents for free, online and with no installation needed.</p>
      </div>
      
      <div class="converter-container">
        <!-- ... rest of the JPG to PDF content ... -->
      </div>
    </div>
  </div>

  <!-- Word to PDF Converter -->
  <div id="word-to-pdf" class="converter-tab-content">
    <div class="word-to-pdf-converter">
      <div class="converter-header">
        <h1>Word to PDF Converter</h1>
        <p>Convert Word documents to PDF files while preserving the original formatting.</p>
      </div>
      
      <div class="converter-container">
        <div class="upload-area" id="wordUploadArea">
          <div class="upload-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <path d="M16 13H8"></path>
              <path d="M16 17H8"></path>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
          </div>
          <h3>Select Word documents</h3>
          <p>or drag and drop DOC/DOCX files here</p>
          <input type="file" id="wordFileInput" accept=".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" multiple style="display: none;">
          <button class="select-files-btn" id="selectWordFilesBtn">Select Word files</button>
        </div>
        
        <div class="file-list" id="wordFileList"></div>
        
        <div class="action-buttons">
          <button class="convert-btn" id="convertWordToPdfBtn" disabled>Convert to PDF</button>
          <button class="clear-btn" id="clearWordFilesBtn">Clear All</button>
        </div>
      </div>
    </div>
  </div>

  <!-- PDF to Word Converter -->
  <div id="pdf-to-word" class="converter-tab-content">
    <div class="pdf-to-word-converter">
      <div class="converter-header">
        <h1>PDF to Word Converter</h1>
        <p>Convert PDF files to editable Word documents while maintaining layout.</p>
      </div>
      
      <div class="converter-container">
        <div class="upload-area" id="pdfUploadArea">
          <div class="upload-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <path d="M16 18H8"></path>
              <path d="M16 14H8"></path>
              <path d="M10 9H8"></path>
            </svg>
          </div>
          <h3>Select PDF files</h3>
          <p>or drag and drop PDF documents here</p>
          <input type="file" id="pdfFileInput" accept=".pdf,application/pdf" multiple style="display: none;">
          <button class="select-files-btn" id="selectPdfFilesBtn">Select PDF files</button>
        </div>
        
        <div class="file-list" id="pdfFileList"></div>
        
        <div class="action-buttons">
          <button class="convert-btn" id="convertPdfToWordBtn" disabled>Convert to Word</button>
          <button class="clear-btn" id="clearPdfFilesBtn">Clear All</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Unit Converter -->
  <div id="unit-converter" class="converter-tab-content">
    <div class="unit-converter">
      <div class="converter-header">
        <h1>Unit Converter</h1>
        <p>Convert between different units of measurement</p>
      </div>
      
      <div class="converter-container">
        <div class="unit-selectors">
          <div class="unit-group">
            <label for="unitCategory">Category:</label>
            <select id="unitCategory">
              <option value="length">Length</option>
              <option value="weight">Weight</option>
              <option value="temperature">Temperature</option>
              <option value="area">Area</option>
              <option value="volume">Volume</option>
              <option value="speed">Speed</option>
            </select>
          </div>
          
          <div class="unit-inputs">
            <div class="unit-input-group">
              <input type="number" id="unitValue" placeholder="Enter value">
              <select id="unitFrom"></select>
            </div>
            
            <button id="swapUnitsBtn" class="swap-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="17 1 21 5 17 9"></polyline>
                <path d="M3 11V9a4 4 0 0 1 4-4h14"></path>
                <polyline points="7 23 3 19 7 15"></polyline>
                <path d="M21 13v2a4 4 0 0 1-4 4H3"></path>
              </svg>
            </button>
            
            <div class="unit-input-group">
              <input type="number" id="unitResult" placeholder="Result" readonly>
              <select id="unitTo"></select>
            </div>
          </div>
        </div>
        
        <div class="conversion-history" id="unitHistory">
          <h3>Recent Conversions</h3>
          <ul id="historyList"></ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Currency Converter -->
  <div id="currency-converter" class="converter-tab-content">
    <div class="currency-converter">
      <div class="converter-header">
        <h1>Currency Converter</h1>
        <p>Convert between world currencies using up-to-date exchange rates</p>
      </div>
      
      <div class="converter-container">
        <div class="currency-inputs">
          <div class="currency-input-group">
            <input type="number" id="currencyAmount" placeholder="Amount" value="1">
            <select id="currencyFrom">
              <option value="USD">USD - US Dollar</option>
              <option value="EUR">EUR - Euro</option>
              <option value="GBP">GBP - British Pound</option>
              <option value="JPY">JPY - Japanese Yen</option>
              <option value="CAD">CAD - Canadian Dollar</option>
              <option value="AUD">AUD - Australian Dollar</option>
            </select>
          </div>
          
          <button id="swapCurrenciesBtn" class="swap-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="17 1 21 5 17 9"></polyline>
              <path d="M3 11V9a4 4 0 0 1 4-4h14"></path>
              <polyline points="7 23 3 19 7 15"></polyline>
              <path d="M21 13v2a4 4 0 0 1-4 4H3"></path>
            </svg>
          </button>
          
          <div class="currency-input-group">
            <input type="number" id="currencyResult" placeholder="Result" readonly>
            <select id="currencyTo">
              <option value="EUR">EUR - Euro</option>
              <option value="USD">USD - US Dollar</option>
              <option value="GBP">GBP - British Pound</option>
              <option value="JPY">JPY - Japanese Yen</option>
              <option value="CAD">CAD - Canadian Dollar</option>
              <option value="AUD">AUD - Australian Dollar</option>
            </select>
          </div>
        </div>
        
        <div class="currency-info">
          <div class="rate-info" id="exchangeRateInfo">
            Exchange rate: Loading...
          </div>
          <div class="last-updated" id="lastUpdated">
            Last updated: Loading...
          </div>
        </div>
        
        <button id="convertCurrencyBtn" class="convert-btn">Convert</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Base styles from previous converter */
.multi-converter-container {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  color: #333;
}

.converter-tabs {
  display: flex;
  margin-bottom: 20px;
  border-bottom: 1px solid #ddd;
}

.tab-btn {
  padding: 12px 20px;
  background: none;
  border: none;
  border-bottom: 3px solid transparent;
  font-size: 16px;
  cursor: pointer;
  transition: all 0.3s;
  color: #7f8c8d;
}

.tab-btn.active {
  color: #3498db;
  border-bottom-color: #3498db;
  font-weight: bold;
}

.tab-btn:hover:not(.active) {
  color: #2980b9;
  border-bottom-color: #eee;
}

.converter-tab-content {
  display: none;
}

.converter-tab-content.active {
  display: block;
}

/* Unit Converter Styles */
.unit-selectors {
  margin-bottom: 30px;
}

.unit-group {
  margin-bottom: 20px;
}

.unit-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
}

.unit-group select {
  width: 100%;
  padding: 10px;
  border: 1px solid #bdc3c7;
  border-radius: 4px;
  font-size: 16px;
}

.unit-inputs {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

.unit-input-group {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.unit-input-group input {
  padding: 12px;
  border: 1px solid #bdc3c7;
  border-radius: 4px;
  font-size: 16px;
  margin-bottom: 8px;
}

.unit-input-group select {
  padding: 10px;
  border: 1px solid #bdc3c7;
  border-radius: 4px;
  font-size: 16px;
}

.swap-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 10px;
  border-radius: 50%;
  transition: background-color 0.3s;
}

.swap-btn:hover {
  background-color: #f1f1f1;
}

.swap-btn svg {
  width: 24px;
  height: 24px;
  color: #3498db;
}

.conversion-history {
  background-color: #f9f9f9;
  padding: 20px;
  border-radius: 8px;
}

.conversion-history h3 {
  margin-top: 0;
  margin-bottom: 15px;
}

#historyList {
  list-style: none;
  padding: 0;
  margin: 0;
}

#historyList li {
  padding: 8px 0;
  border-bottom: 1px solid #eee;
}

/* Currency Converter Styles */
.currency-inputs {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

.currency-input-group {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.currency-input-group input {
  padding: 12px;
  border: 1px solid #bdc3c7;
  border-radius: 4px;
  font-size: 16px;
  margin-bottom: 8px;
}

.currency-input-group select {
  padding: 10px;
  border: 1px solid #bdc3c7;
  border-radius: 4px;
  font-size: 16px;
}

.currency-info {
  margin-bottom: 20px;
  text-align: center;
  color: #7f8c8d;
  font-size: 14px;
}

/* Responsive styles */
@media (max-width: 768px) {
  .converter-tabs {
    flex-wrap: wrap;
  }
  
  .tab-btn {
    flex: 1 0 50%;
    text-align: center;
  }
  
  .unit-inputs, .currency-inputs {
    flex-direction: column;
  }
  
  .swap-btn {
    transform: rotate(90deg);
    margin: 10px 0;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Tab switching functionality
  const tabs = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.converter-tab-content');
  
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      // Remove active class from all tabs and contents
      tabs.forEach(t => t.classList.remove('active'));
      tabContents.forEach(c => c.classList.remove('active'));
      
      // Add active class to clicked tab and corresponding content
      tab.classList.add('active');
      const tabId = tab.getAttribute('data-tab');
      document.getElementById(tabId).classList.add('active');
    });
  });

  // Unit Converter
  const unitCategory = document.getElementById('unitCategory');
  const unitFrom = document.getElementById('unitFrom');
  const unitTo = document.getElementById('unitTo');
  const unitValue = document.getElementById('unitValue');
  const unitResult = document.getElementById('unitResult');
  const swapUnitsBtn = document.getElementById('swapUnitsBtn');
  const historyList = document.getElementById('historyList');
  
  // Define unit conversion data
  const unitData = {
    length: {
      units: ['millimeter', 'centimeter', 'meter', 'kilometer', 'inch', 'foot', 'yard', 'mile'],
      conversions: {
        millimeter: 1,
        centimeter: 10,
        meter: 1000,
        kilometer: 1000000,
        inch: 25.4,
        foot: 304.8,
        yard: 914.4,
        mile: 1609344
      }
    },
    weight: {
      units: ['milligram', 'gram', 'kilogram', 'tonne', 'ounce', 'pound', 'stone'],
      conversions: {
        milligram: 1,
        gram: 1000,
        kilogram: 1000000,
        tonne: 1000000000,
        ounce: 28349.5,
        pound: 453592,
        stone: 6350290
      }
    },
    temperature: {
      units: ['celsius', 'fahrenheit', 'kelvin'],
      isTemperature: true
    },
    area: {
      units: ['square millimeter', 'square centimeter', 'square meter', 'hectare', 'square kilometer', 'square inch', 'square foot', 'square yard', 'acre', 'square mile'],
      conversions: {
        'square millimeter': 1,
        'square centimeter': 100,
        'square meter': 1000000,
        'hectare': 10000000000,
        'square kilometer': 1000000000000,
        'square inch': 645.16,
        'square foot': 92903,
        'square yard': 836127,
        'acre': 4046856422,
        'square mile': 2589988110336
      }
    },
    volume: {
      units: ['milliliter', 'centiliter', 'deciliter', 'liter', 'hectoliter', 'cubic centimeter', 'cubic meter', 'teaspoon', 'tablespoon', 'fluid ounce', 'cup', 'pint', 'quart', 'gallon'],
      conversions: {
        'milliliter': 1,
        'centiliter': 10,
        'deciliter': 100,
        'liter': 1000,
        'hectoliter': 100000,
        'cubic centimeter': 1,
        'cubic meter': 1000000,
        'teaspoon': 4.92892,
        'tablespoon': 14.7868,
        'fluid ounce': 29.5735,
        'cup': 236.588,
        'pint': 473.176,
        'quart': 946.353,
        'gallon': 3785.41
      }
    },
    speed: {
      units: ['meter per second', 'kilometer per hour', 'mile per hour', 'knot', 'foot per second'],
      conversions: {
        'meter per second': 1,
        'kilometer per hour': 0.277778,
        'mile per hour': 0.44704,
        'knot': 0.514444,
        'foot per second': 0.3048
      }
    }
  };
  
  // Initialize unit dropdowns
  function initUnitDropdowns() {
    const category = unitCategory.value;
    const units = unitData[category].units;
    
    unitFrom.innerHTML = '';
    unitTo.innerHTML = '';
    
    units.forEach(unit => {
      const option1 = document.createElement('option');
      option1.value = unit;
      option1.textContent = unit;
      
      const option2 = document.createElement('option');
      option2.value = unit;
      option2.textContent = unit;
      
      unitFrom.appendChild(option1);
      unitTo.appendChild(option2);
    });
    
    // Set default "to" unit to something different
    if (units.length > 1) {
      unitTo.selectedIndex = 1;
    }
  }
  
  // Convert units
  function convertUnits() {
    const category = unitCategory.value;
    const fromUnit = unitFrom.value;
    const toUnit = unitTo.value;
    const value = parseFloat(unitValue.value);
    
    if (isNaN(value)) {
      unitResult.value = '';
      return;
    }
    
    let result;
    
    if (unitData[category].isTemperature) {
      // Temperature conversion
      result = convertTemperature(value, fromUnit, toUnit);
    } else {
      // Standard conversion
      const fromFactor = unitData[category].conversions[fromUnit];
      const toFactor = unitData[category].conversions[toUnit];
      result = (value * fromFactor) / toFactor;
    }
    
    unitResult.value = result.toFixed(6).replace(/\.?0+$/, '');
    
    // Add to history
    addToHistory(category, fromUnit, toUnit, value, result);
  }
  
  // Temperature conversion
  function convertTemperature(value, fromUnit, toUnit) {
    let celsius;
    
    // Convert to Celsius first
    switch (fromUnit) {
      case 'celsius':
        celsius = value;
        break;
      case 'fahrenheit':
        celsius = (value - 32) * 5/9;
        break;
      case 'kelvin':
        celsius = value - 273.15;
        break;
    }
    
    // Convert from Celsius to target unit
    switch (toUnit) {
      case 'celsius':
        return celsius;
      case 'fahrenheit':
        return (celsius * 9/5) + 32;
      case 'kelvin':
        return celsius + 273.15;
    }
  }
  
  // Add conversion to history
  function addToHistory(category, fromUnit, toUnit, value, result) {
    const historyItem = document.createElement('li');
    historyItem.textContent = `${value} ${fromUnit} = ${result} ${toUnit}`;
    historyList.prepend(historyItem);
    
    // Keep only the last 5 items
    if (historyList.children.length > 5) {
      historyList.removeChild(historyList.lastChild);
    }
  }
  
  // Swap units
  function swapUnits() {
    const temp = unitFrom.value;
    unitFrom.value = unitTo.value;
    unitTo.value = temp;
    convertUnits();
  }
  
  // Event listeners for unit converter
  unitCategory.addEventListener('change', initUnitDropdowns);
  unitFrom.addEventListener('change', convertUnits);
  unitTo.addEventListener('change', convertUnits);
  unitValue.addEventListener('input', convertUnits);
  swapUnitsBtn.addEventListener('click', swapUnits);
  
  // Initialize
  initUnitDropdowns();
  
  // Currency Converter
  const currencyFrom = document.getElementById('currencyFrom');
  const currencyTo = document.getElementById('currencyTo');
  const currencyAmount = document.getElementById('currencyAmount');
  const currencyResult = document.getElementById('currencyResult');
  const swapCurrenciesBtn = document.getElementById('swapCurrenciesBtn');
  const convertCurrencyBtn = document.getElementById('convertCurrencyBtn');
  const exchangeRateInfo = document.getElementById('exchangeRateInfo');
  const lastUpdated = document.getElementById('lastUpdated');
  
  // Exchange rate data (would normally be fetched from an API)
  let exchangeRates = {
    USD: 1,
    EUR: 0.85,
    GBP: 0.73,
    JPY: 110.25,
    CAD: 1.25,
    AUD: 1.35,
    lastUpdated: new Date().toLocaleString()
  };
  
  // Fetch exchange rates (mock)
  function fetchExchangeRates() {
    // In a real app, you would fetch from an API like:
    // fetch('https://api.exchangerate-api.com/v4/latest/USD')
    //   .then(response => response.json())
    //   .then(data => {
    //     exchangeRates = data.rates;
    //     exchangeRates.lastUpdated = new Date().toLocaleString();
    //     updateCurrencyInfo();
    //   });
    
    // Mock update
    setTimeout(() => {
      exchangeRates.lastUpdated = new Date().toLocaleString();
      updateCurrencyInfo();
    }, 1000);
  }
  
  // Convert currency
  function convertCurrency() {
    const fromCurrency = currencyFrom.value;
    const toCurrency = currencyTo.value;
    const amount = parseFloat(currencyAmount.value);
    
    if (isNaN(amount)) {
      currencyResult.value = '';
      return;
    }
    
    // Convert to USD first, then to target currency
    const amountInUSD = amount / exchangeRates[fromCurrency];
    const result = amountInUSD * exchangeRates[toCurrency];
    
    currencyResult.value = result.toFixed(4);
    updateCurrencyInfo();
  }
  
  // Update currency info display
  function updateCurrencyInfo() {
    const fromCurrency = currencyFrom.value;
    const toCurrency = currencyTo.value;
    const rate = (exchangeRates[toCurrency] / exchangeRates[fromCurrency]).toFixed(6);
    
    exchangeRateInfo.textContent = `Exchange rate: 1 ${fromCurrency} = ${rate} ${toCurrency}`;
    lastUpdated.textContent = `Last updated: ${exchangeRates.lastUpdated}`;
  }
  
  // Swap currencies
  function swapCurrencies() {
    const temp = currencyFrom.value;
    currencyFrom.value = currencyTo.value;
    currencyTo.value = temp;
    convertCurrency();
  }
  
  // Event listeners for currency converter
  currencyFrom.addEventListener('change', convertCurrency);
  currencyTo.addEventListener('change', convertCurrency);
  currencyAmount.addEventListener('input', convertCurrency);
  swapCurrenciesBtn.addEventListener('click', swapCurrencies);
  convertCurrencyBtn.addEventListener('click', convertCurrency);
  
  // Initialize
  fetchExchangeRates();
  convertCurrency();

  // Word to PDF Converter (similar to JPG to PDF)
  const wordUploadArea = document.getElementById('wordUploadArea');
  const wordFileInput = document.getElementById('wordFileInput');
  const selectWordFilesBtn = document.getElementById('selectWordFilesBtn');
  const wordFileList = document.getElementById('wordFileList');
  const convertWordToPdfBtn = document.getElementById('convertWordToPdfBtn');
  const clearWordFilesBtn = document.getElementById('clearWordFilesBtn');
  
  let wordFiles = [];
  
  selectWordFilesBtn.addEventListener('click', () => wordFileInput.click());
  wordUploadArea.addEventListener('click', () => wordFileInput.click());
  
  wordFileInput.addEventListener('change', handleWordFileSelect);
  
  // Drag and drop for Word files
  wordUploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    wordUploadArea.classList.add('drag-over');
  });
  
  wordUploadArea.addEventListener('dragleave', () => {
    wordUploadArea.classList.remove('drag-over');
  });
  
  wordUploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    wordUploadArea.classList.remove('drag-over');
    if (e.dataTransfer.files.length > 0) {
      handleWordFileSelect({ target: { files: e.dataTransfer.files } });
    }
  });
  
  function handleWordFileSelect(event) {
    const newFiles = Array.from(event.target.files).filter(file => 
      file.name.match(/\.docx?$/i) || 
      file.type === 'application/msword' ||
      file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    );
    
    if (newFiles.length === 0) {
      alert('Please select Word documents only (.doc or .docx)');
      return;
    }
    
    wordFiles = [...wordFiles, ...newFiles];
    updateWordFileList();
    wordFileInput.value = '';
  }
  
  function updateWordFileList() {
    wordFileList.innerHTML = '';
    
    if (wordFiles.length === 0) {
      convertWordToPdfBtn.disabled = true;
      return;
    }
    
    convertWordToPdfBtn.disabled = false;
    
    wordFiles.forEach((file, index) => {
      const fileItem = document.createElement('div');
      fileItem.className = 'file-item';
      
      const fileInfo = document.createElement('div');
      fileInfo.className = 'file-info';
      
      const fileIcon = document.createElement('div');
      fileIcon.className = 'file-icon';
      fileIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><path d="M16 13H8"></path><path d="M16 17H8"></path><polyline points="10 9 9 9 8 9"></polyline></svg>';
      
      const fileName = document.createElement('div');
      fileName.className = 'file-name';
      fileName.textContent = file.name;
      
      const fileSize = document.createElement('div');
      fileSize.className = 'file-size';
      fileSize.textContent = formatFileSize(file.size);
      
      const removeFile = document.createElement('button');
      removeFile.className = 'remove-file';
      removeFile.innerHTML = '&times;';
      removeFile.addEventListener('click', () => {
        wordFiles.splice(index, 1);
        updateWordFileList();
      });
      
      fileInfo.appendChild(fileIcon);
      fileInfo.appendChild(fileName);
      fileInfo.appendChild(fileSize);
      
      fileItem.appendChild(fileInfo);
      fileItem.appendChild(removeFile);
      
      wordFileList.appendChild(fileItem);
    });
  }
  
  function clearWordFiles() {
    wordFiles = [];
    updateWordFileList();
  }
  
  function convertWordToPdf() {
    alert('In a real implementation, this would convert Word files to PDF. For demo purposes, we\'re just showing this message.');
    // This would typically involve:
    // 1. Uploading files to a server
    // 2. Processing them with a library like LibreOffice or specialized PDF conversion software
    // 3. Providing download links for the converted files
  }
  
  clearWordFilesBtn.addEventListener('click', clearWordFiles);
  convertWordToPdfBtn.addEventListener('click', convertWordToPdf);

  // PDF to Word Converter (similar to others)
  const pdfUploadArea = document.getElementById('pdfUploadArea');
  const pdfFileInput = document.getElementById('pdfFileInput');
  const selectPdfFilesBtn = document.getElementById('selectPdfFilesBtn');
  const pdfFileList = document.getElementById('pdfFileList');
  const convertPdfToWordBtn = document.getElementById('convertPdfToWordBtn');
  const clearPdfFilesBtn = document.getElementById('clearPdfFilesBtn');
  
  let pdfFiles = [];
  
  selectPdfFilesBtn.addEventListener('click', () => pdfFileInput.click());
  pdfUploadArea.addEventListener('click', () => pdfFileInput.click());
  
  pdfFileInput.addEventListener('change', handlePdfFileSelect);
  
  // Drag and drop for PDF files
  pdfUploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    pdfUploadArea.classList.add('drag-over');
  });
  
  pdfUploadArea.addEventListener('dragleave', () => {
    pdfUploadArea.classList.remove('drag-over');
  });
  
  pdfUploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    pdfUploadArea.classList.remove('drag-over');
    if (e.dataTransfer.files.length > 0) {
      handlePdfFileSelect({ target: { files: e.dataTransfer.files } });
    }
  });
  
  function handlePdfFileSelect(event) {
    const newFiles = Array.from(event.target.files).filter(file => 
      file.name.match(/\.pdf$/i) || 
      file.type === 'application/pdf'
    );
    
    if (newFiles.length === 0) {
      alert('Please select PDF files only');
      return;
    }
    
    pdfFiles = [...pdfFiles, ...newFiles];
    updatePdfFileList();
    pdfFileInput.value = '';
  }
  
  function updatePdfFileList() {
    pdfFileList.innerHTML = '';
    
    if (pdfFiles.length === 0) {
      convertPdfToWordBtn.disabled = true;
      return;
    }
    
    convertPdfToWordBtn.disabled = false;
    
    pdfFiles.forEach((file, index) => {
      const fileItem = document.createElement('div');
      fileItem.className = 'file-item';
      
      const fileInfo = document.createElement('div');
      fileInfo.className = 'file-info';
      
      const fileIcon = document.createElement('div');
      fileIcon.className = 'file-icon';
      fileIcon.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><path d="M16 18H8"></path><path d="M16 14H8"></path><path d="M10 9H8"></path></svg>';
      
      const fileName = document.createElement('div');
      fileName.className = 'file-name';
      fileName.textContent = file.name;
      
      const fileSize = document.createElement('div');
      fileSize.className = 'file-size';
      fileSize.textContent = formatFileSize(file.size);
      
      const removeFile = document.createElement('button');
      removeFile.className = 'remove-file';
      removeFile.innerHTML = '&times;';
      removeFile.addEventListener('click', () => {
        pdfFiles.splice(index, 1);
        updatePdfFileList();
      });
      
      fileInfo.appendChild(fileIcon);
      fileInfo.appendChild(fileName);
      fileInfo.appendChild(fileSize);
      
      fileItem.appendChild(fileInfo);
      fileItem.appendChild(removeFile);
      
      pdfFileList.appendChild(fileItem);
    });
  }
  
  function clearPdfFiles() {
    pdfFiles = [];
    updatePdfFileList();
  }
  
  function convertPdfToWord() {
    alert('In a real implementation, this would convert PDF files to Word documents. For demo purposes, we\'re just showing this message.');
    // This would typically involve:
    // 1. Uploading files to a server
    // 2. Processing them with OCR and PDF-to-Word conversion software
    // 3. Providing download links for the converted files
  }
  
  clearPdfFilesBtn.addEventListener('click', clearPdfFiles);
  convertPdfToWordBtn.addEventListener('click', convertPdfToWord);

  // Helper function to format file size
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
});
</script>
